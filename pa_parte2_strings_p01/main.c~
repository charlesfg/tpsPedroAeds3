/* *****************************************************************************************************
URI Online Judge | 1551
Frase Completa

Por Cristhian Bonilha, UTFPR Brazil
Timelimit: 1

Seu professor de português não para de trazer coisas novas para a sala, e hoje não foi diferente.
Existe uma cidade, segundo seu professor, onde as pessoas levam muito a sério a forma como elas
se comunicam. Em especial, quando duas pessoas estão conversando, elas pensam muito nas frases
antes de dizê‐las, de forma a garantir que tal frase seja uma “frase completa”, ou talvez uma “frase
quase completa”.

Considerando o nosso alfabeto de 26 letras, uma frase é dita “completa” quando ela contém todas as
letras do alfabeto contidas nela. De modo semelhante, uma frase é dita “quase completa” se ela não
é completa, porém contém ao menos metade das letras do alfabeto contidas nela. Quando uma frase
não é “completa” e nem “quase completa”, ela é dita “mal elaborada”. Seu professor lhe deu uma
tarefa muito difícil: dadas várias frases trocadas entre vários habitantes da cidade citada,
diga em qual das categorias acima a frase se encaixa.

Entrada

A primeira linha contém um inteiro N, indicando o número de casos de teste a seguir.
Cada caso de teste contém uma linha, contendo letras minúsculas, espaços em branco e/ou vírgulas.
O número de caracteres de cada linha é no mínimo 3 e no máximo 1000, contando com os espaços.

Exemplo de Entrada

2
ola, como voce esta hoje
hoje  fui  na  feira,  e  comprei  banana,
melao e abacates


Saída

Para cada caso de teste, imprima uma linha contendo uma das seguintes frases: “frase completa”,
quando a frase é considerada completa; “frase quase completa”, quando a frase não é completa, mas
é considerada quase completa; ou “frase mal elaborada”, quando ela não é completa e nem quase
completa.

Exemplo de Saída

frase mal elaborada
frase quase completa

***************************************************************************************************** */

// ************************************ VERSAO 01 - VETOR ******************************************* //

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// inicializa os vetores da Frase e de Chars Lidos
void inicializa_vetores( int *lid )
{
    int i;

    // nao precisa inicializar o vetor da Frase, ele sera sobreescrito conforme o andamento do programa

    // percorre o vetor de chars lidos e ZERA todos os valores
    for (i = 0; i < 26; i++)
    {
        lid[i] = 0;
    }
}

// le a frase da entrada padrao e armazena no vetor passado como parametro
void le_frase (char *fr)
{
    // le ate 1000 chars da entrada padrao (stdin) e armazena em 'fr'
    fgets(fr, 1000, stdin);

    /* outro jeito de ler
    int i = 0;
    char c = ' ';

    while(c != '\0')
    {
        fscanf(stdin, "%c", &fr[i]);

        if (i < 1001)
        {
            i++;
        }
    }*/

}

void imprime_vetor_palavras(char *vp, int t)
{
    int j = 0;
    for(j = 0; j < t ; j++)
    {
        printf("Frase[%d] - %c\n", j, vp[j]);
    }
}

void imprime_vetor_palavras_v2(char *vp)
{
    int j;
    for(j = 0; j != '\0' ; j++)
    {
        fprintf(stdout, "%c", vp[j]);
    }
}

// verifica quais chars do alfabeto estao presentes na frase e retorna a quantidade presente
int verifica_frase (char *fr , char *alfab , int *lid)
{
    int i, j, qtde_chars_lidos = 0;

    // percorre o texto ate encontrar o caractere especial de fim de string '\0'
    for (i = 0; i != '\0'; i++)
    {
        for (j = 0; j < 26; j++)
        {
            if (fr[i] == alfab[j])
            {
                lid[j] = 1;
                qtde_chars_lidos++;
                break; // nao precisa continuar o loop interno pois ja encontrou o char do alfabeto
            }
        }
    }

    return qtde_chars_lidos;
}

// imprime o resultado com base no numero de chars presentes na frase
void imprime_resultado (int n)
{
    if (n == 26)
    {
        fprintf(stdout, "frase completa\n"); // contem todas as letras do alfabeto
    }
    else if (n >= 13 && n < 26)
        {
            fprintf(stdout, "frase quase completa\n"); // contem pelo menos a metade das letras
        }
        else
            fprintf(stdout, "frase mal elaborada\n");
}

int main()
{
    int i, num_casos_teste;
    char frase[1001], alfabeto[] = {"abcdefghijklmnopqrstuvwxyz"}, c_aux;
    int chars_lidos[26], num_chars_lidos;

    fscanf(stdin, "%d", &num_casos_teste); // le da entrada padrao o numero de casos de teste

    fscanf(stdin, "%c", &c_aux); // le da entrada padrao caractere especial de quebra de linha, '\n'

    for (i = 0; i < num_casos_teste; i++)
    {
        fprintf(stdout, "\n Caso Teste #%d\n", i+1 ); // DEBUG INFO

        inicializa_vetores(chars_lidos); // inicializa os valores para um novo caso de teste

        num_chars_lidos = 0; // reseta o contador do numero de caracteres lidos

        le_frase(frase);                // le a frase da entrada padrao - jeito 1
        //fgets(&frase, 1000, stdin);   // le a frase da entrada padrao - jeito 2

        fprintf(stdout, "\n frase: %s\n", frase); //imprime o vetor de palavras - DEBUG INFO

        //imprime_vetor_palavras(&frase, strlen(frase)); // DEBUG INFO
        //imprime_vetor_palavras_v2(&frase); // DEBUG INFO

        num_chars_lidos = verifica_frase(frase, &alfabeto, &chars_lidos);

        fprintf(stdout, "\n num chars lidos: %d\n", num_chars_lidos); // DEBUG INFO

        imprime_resultado(num_chars_lidos);
    }

    return 0;
}

/* ************************************ VERSAO 02 - DINAMICA ********************************************* //

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// inicializa os vetores da Frase e de Chars Lidos
void inicializa_vetores( char *fr, int *lid )
{
    int i;

    // aloca memoria necessaria para o vetor dinamico que armazenara a frase, (max 1000 caracteres)
    fr = (char*) malloc(1001 * sizeof(char));

    // percorre o vetor de chars lidos e ZERA todos os valores
    for (i = 0; i < 26; i++)
    {
        lid[i] = 0;
    }
}

// desaloca memoria do vetores da Frase
void libera_vetor( char *fr )
{
    free(fr);
}

// le a frase da entrada padrao e armazena no vetor passado como parametro
void le_frase (char *fr)
{
    // le ate 1000 chars da entrada padrao (stdin) e armazena em 'fr'
    fgets(fr, 1000, stdin);

    outro jeito de ler
    int i = 0;
    char c = ' ';

    while(c != '\0')
    {
        fscanf(stdin, "%c", &fr[i]);

        if (i < 1001)
        {
            i++;
        }
    }

}

//void imprime_vetor_palavras(char *vp, int t)
void imprime_vetor_palavras(char *vp)
{
    int j = 0;
    for(j = 0; j < t ; j++)
    {
        printf("Frase[%d] - %s\n", j, vp[j]);
    }
    int j;
    for(j = 0; j != '\0' ; j++)
    {
        fprintf(stdout, "%c", vp[j]);
    }
}

// verifica quais chars do alfabeto estao presentes na frase e retorna a quantidade presente
int verifica_frase (char *fr , char *alfab , int *lid)
{
    int i, j, qtde_chars_lidos = 0;

    // percorre o texto ate encontrar o caractere especial de fim de string '\0'
    for (i = 0; i != '\0'; i++)
    {
        for (j = 0; j < 26; j++)
        {
            if (fr[i] == alfab[j])
            {
                lid[j] = 1;
                qtde_chars_lidos++;
            }
        }
    }

    return qtde_chars_lidos;
}

// imprime o resultado com base no numero de chars presentes na frase
void imprime_resultado (int n)
{
    if (n == 26)
    {
        fprintf(stdout, "frase completa\n"); // contem todas as letras do alfabeto
    }
    else if (n >= 13 && n < 26)
        {
            fprintf(stdout, "frase quase completa\n"); // contem pelo menos a metade das letras
        }
        else
            fprintf(stdout, "frase mal elaborada\n");
}

int main()
{
    int i, num_casos_teste;
    char alfabeto[] = {"abcdefghijklmnopqrstuvwxyz"}, c_aux;
    int chars_lidos[26], num_chars_lidos;

    fscanf(stdin, "%d", &num_casos_teste); // le da entrada padrao o numero de casos de teste

    fscanf(stdin, "%c", &c_aux); // le da entrada padrao caractere especial de quebra de linha, '\n'

    for (i = 0; i < num_casos_teste; i++)
    {
        char *frase;

        inicializa_vetores(frase, &chars_lidos); // inicializa os valores para um novo caso de teste

        num_chars_lidos = 0; // reseta o contador do numero de caracteres lidos

        le_frase(frase);

        fprintf(stdout, "\n frase: %s\n", frase);

        //imprime_vetor_palavras(frase);

        num_chars_lidos = verifica_frase(frase, &alfabeto, &chars_lidos);

        fprintf(stdout, "\n num chars lidos: %d\n", num_chars_lidos);

        imprime_resultado(num_chars_lidos);

        libera_vetor(frase);
    }

    return 0;
}
*/
